#include "pch.h"
#include <iostream>
#include <cstdio>
#include <cmath>

using namespace std;


/*
	Дисциплина: Компьютерный практикум (зачет);
	Студент:    Толкачев Евгений;
	Группа:     ИВТ-316;
	Вариант:    2;
*/



/*
								Задание №1

					Записать арифметическое выражение

									3.5*d^2 + 1
						F = ln(d) + -----------
									  cos(2y)
*/

double Task1_F(double d, double y)
{
	// log() - вычисляет логарифм по натуральному основанию;
	// pow() - вычисляет число в заданной степени;
	// cos() - вычисляет косинус в радианах по заданному углу.
	return log(d) + (3.5 * pow(d, 2) + 1) / cos(2 * y);
}






/*
								Задание №2

	Составить суммы n членов ряда согласно условию задачи:
	S = cos(x) + cos(2*x)/2 + cos(3*x)/3 + ... cos(n*x)/n
	epsilon = 1e-15.

	Суть задачи: накапливать сумму до тех пор, пока n-ый член последовательности не станет
	меньше заданного эпсилона.
*/

// Определяем функцию, которая по заданным n и х позволяет получить
// значение n-го члена последовательности
double Task2_function(double x, double n)
{
	return cos(n * x) / n;
}

// Вычисление суммы n членов ряда
double Task2_S(double x)
{
	double n = 1.0;								       // Переменная для хранения текущего значения N;
	double result = 0;								   // Накопительная переменная;
	double epsilon = 1e-15;							   // Заданная точность вычисления;
	double currentValue = abs(Task2_function(x, n));   // Абсолютное значение функции cos(n*x)/n на начальном этапе;

	while (currentValue > epsilon) {				   // Пока значение текущего члена ряда больше эпсилона
		result += currentValue;						   // прибавляем его к общей сумме всех членов.
		n += 1.0;									   // Увеличиваем n на единицу.
		currentValue = abs(Task2_function(x, n));	   // С учетом нового значения n пересчитываем значение следующего члена ряда.
	}
	
	// Дополнительный вывод для проверки работоспособности функции
	cout << "  # Проверка. x = " << x << "\n      Значение, на котором остановлены вычисления: " << currentValue << '\n'
		 << "      Индекс: " << n << "\n      Итоговая сумма: " << result << "\n\n";

	return result;
}





/*
								Задание №3

	Ввести массив, состоящий из 12 элементов целого типа. Получить новый
	массив, заменив значение пятого элемента среднеарифметическим исходного массива.
*/

int* Task3_GetNewArray(int arr[12])
{
	double average = 0;			 // Переменная для хранения среднего арифметического;

	for (int i = 0; i < 12; i++) // Ищем сумму всех элементов массива;
		average += arr[i];

	average /= 12;				 // Т.к. по условию размер массива задан, делим сумму
								 // всех элементов массива на 12;
	arr[4] = (int)average;	     // Присваиваем 5-ому элементу массива значение среднего
								 // арифметического. Единственный не до конца понятный мне момент -
								 // по условию, исходный массив целочисленного типа (int). Для
								 // корректного вычисления среднего арифметического используем
								 // тип с плавающей точкой (double). При присваивании пятому элементу
								 // среднего арифметического будет выполнено неявное (или явное, как в нашем случае)
								 // преобразование типа, в результате которого значение будет округлено.
	return arr;				     // Возвращаем обновленный массив.
}






/*
								Задание №4
	Дан двухмерный массив 7х7. Найти сумму модулей отрицательных нечетных элементов.
*/

int Task4_AbsoluteValueSum(int arr[7][7])
{
	int result = 0;

	for (int i = 0; i < 7; i++)
		for (int j = 0; j < 7; j++)
			if ((arr[i][j] < 0) & (abs(arr[i][j]) % 2 == 1))  // Одиночный амперсанд позволяет избежать второго условия,
				result += abs(arr[i][j]);					  // если первое не выполняется.

	return result;
}






/*
								Задание №5
	Рассчитать значение y определив и использовав необходимую функцию:

				 1 + sin(1)      3 + sin(3)     5 + sin(5)
			y = ------------ + ------------- + ------------
					3               3				3

*/

double Task5_CalculateY()
{
	return ((1 + sin(1)) / 3.0) + ((3 + sin(3)) / 3.0) + ((5 + sin(5)) / 3.0);
}






/*
								Задание №6
	Написать программу согласно заданию. Все массивы в заданиях объявить как динамические:
	Ввести целое число N и массив из N вещественных чисел. Определить количество отрицательных
	элементов массива.
*/

int Task6_CountOfNegatives()
{
	int N, result = 0;						// N - количество элементов массива, result - счетчик;
	double* arr;							// Инициализируем одномерный массив;

	cout << "Введите число N: ";		    // Вводим число N;
	cin >> N;

	if (N <= 0) {
		cout << "(!) Введенное число должно быть > 0!\n";
		return 0;
	}

	arr = new double[N];					// Динамически выделяем память под N элементов вещественного типа;

	for (int i = 0; i < N; i++) {			// Вводим все элементы
		cout << "Введите значение " << i + 1 << "-го элемента: ";
		cin >> arr[i];

		if (arr[i] < 0)						// Сразу проверяем, является ли число отрицательным. Это позволит избежать повторной
			result++;						// проверки массива;
	}

	return result;
}






/********************************************************************************************************************************/
/*                                                                                                                              */
/*															ТЕСТЫ																*/
/*                                                                                                                              */
/********************************************************************************************************************************/

int main()
{
	setlocale(LC_ALL, "Russian");			// Для корректного отображения кириллицы;


	/* ЗАДАНИЕ 1. Тесты */

	/* Условия:
			Записать арифметическое выражение

						3.5*d^2 + 1
			F = ln(d) + -----------
						  cos(2y)
	*/

	cout << "# Задание 1. Тесты\n";
	cout << "  Тест 1. d = 5, y = 1. "     << "\n   > Ответ, вычисленный вручную: -211.0558. " << "\n   > Ответ, вычисленный программой: " << Task1_F(5, 1)     << '\n';
	cout << "  Тест 2. d = 7.5, y = 10. "  << "\n   > Ответ, вычисленный вручную:  486.9051. " << "\n   > Ответ, вычисленный программой: " << Task1_F(7.5, 10)  << '\n';
	cout << "  Тест 3. d = 10, y = 11.5. " << "\n   > Ответ, вычисленный вручную: -656.4403. " << "\n   > Ответ, вычисленный программой: " << Task1_F(10, 11.5) << "\n\n\n";







	/* ЗАДАНИЕ 2. Тесты */
	/* Условия:
			Составить суммы n членов ряда согласно условию задачи:
			S = cos(x) + cos(2*x)/2 + cos(3*x)/3 + ... cos(n*x)/n
	*/
	cout << "# Задание 2. Тесты\n" << "  В этой задаче вычисления могут занять какое-то время...\n\n";
	cout << "  Тест 1. x = 1\n"; cout << "   > Результат: " << Task2_S(1) << "\n\n\n";
	cout << "  Тест 2. x = 2\n"; cout << "   > Результат: " << Task2_S(2) << "\n\n\n";
	cout << "  Тест 3. x = 3\n"; cout << "   > Результат: " << Task2_S(3) << "\n\n\n\n";
	   






	/* ЗАДАНИЕ 3. Тесты */

	/* Условия:
			Ввести массив, состоящий из 12 элементов целого типа. Получить новый
			массив, заменив значение пятого элемента среднеарифметическим исходного массива.
	*/
	int task3_test1_array[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };             // Среднее арифметическое - 1;
	int task3_test2_array[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12 };            // Среднее арифметическое - 1;
	int task3_test3_array[12] = { 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12 }; // Среднее арифметическое - 12;

	cout << "# Задание 3. Тесты\n";

	cout << "  Тест 1. Массив состоящий из 12 единиц.\n"
		 << "   > Среднее арифметическое: 1.\n"
		 << "   > Ответ, вычисленный программой: "
		 << Task3_GetNewArray(task3_test1_array)[4] << '\n';


	cout << "  Тест 2. Массив состоящий из 11 нулей и одного элемента со значением 12.\n"
		 << "   > Среднее арифметическое: 1.\n"
		 << "   > Ответ, вычисленный программой: "
		 << Task3_GetNewArray(task3_test2_array)[4] << '\n';


	cout << "  Тест 3. Массив состоящий из 12 элементов со значением 12.\n"
		 << "   > Среднее арифметическое: 12.\n"
		 << "   > Ответ, вычисленный программой: "
		 << Task3_GetNewArray(task3_test3_array)[4] << "\n\n\n";


	// В качестве проверки выводим 5-ый элемент, который по условию должен быть равен среднему арифметическому. 
	// Т.к. остальные элементы массива не меняются, нет большого смысла выводить их для проверки.







	/* ЗАДАНИЕ 4. Тесты */
	/* Условия:
			Дан двухмерный массив 7х7. Найти сумму модулей отрицательных нечетных элементов.
	*/

	// Массив для теста 1. Сумма: 17.
	int task4_test1_array[7][7] = {
		{ 0, 0, 0, 0, 0, 0, -3 },
		{ 0, 0, 0, 0, 2, 3, -1 },
		{ 0, 0, 0, 0, 4, 5, -5 },
		{ 0, 0, 0, 0, 6, 7, -7 },
		{ 0, 0, 0, 0, 8, 9, -8 },
		{ 0, 0, 0, 0, 1, 1, -2 },
		{ 0, 0, 0, 0, 1, 1, -1 }
	};


	// Массив для теста 2. Сумма: 35.
	int task4_test2_array[7][7] = {
		{ 1, 2, 3, 4, 5, 6, -5 },
		{ 2, 3, 4, 5, 6, 7, -5 },
		{ 3, 4, 5, 6, 7, 8, -5 },
		{ 4, 5, 6, 7, 8, 9, -5 },
		{ 5, 6, 7, 8, 9, 9, -5 },
		{ 6, 7, 8, 9, 9, 9, -5 },
		{ 7, 8, 9, 9, 9, 9, -5 }
	};


	// Массив для теста 3. Сумма: 0.
	int task4_test3_array[7][7] = {
		{ 0, 0, 0, 0, 0, 0, 3 },
		{ 0, 0, 0, 0, 2, 3, 1 },
		{ 0, 0, 0, 0, 4, 5, 5 },
		{ 0, 0, 0, 0, 6, 7, 7 },
		{ 0, 0, 0, 0, 8, 9, 8 },
		{ 0, 0, 0, 0, 1, 1, 2 },
		{ 0, 0, 0, 0, 1, 1, 1 }
	};

	cout << "# Задание 4. Тесты\n";
	cout << "  Тест 1\n"
		 << "     > Ответ вычисленный вручную: 17.\n"
		 << "     > Ответ, вычисленный программой: " << Task4_AbsoluteValueSum(task4_test1_array) << '\n';


	cout << "  Тест 2\n"
		 << "     > Ответ вычисленный вручную: 35.\n"
		 << "     > Ответ, вычисленный программой: " << Task4_AbsoluteValueSum(task4_test2_array) << '\n';


	cout << "  Тест 3\n"
		 << "     > Ответ вычисленный вручную: 0.\n"
		 << "     > Ответ, вычисленный программой: " << Task4_AbsoluteValueSum(task4_test3_array) << "\n\n\n";






	/* ЗАДАНИЕ 5. Тесты */
	/* Условия:
			Рассчитать значение y определив и использовав необходимую функцию:

						 1 + sin(1)      3 + sin(3)     5 + sin(5)
					y = ------------ + ------------- + ------------
							3               3				3
	*/

	// Т.к. y  в данной задаче всегда будет константным, невозможно написать больше одного теста

	cout << "# Задание 5. Тесты\n";
	cout << "  Тест 1\n"
		<< "     > Ответ вычисленный вручную: 3.0078.\n"
		<< "     > Ответ, вычисленный программой: " << Task5_CalculateY() << "\n\n";






	/* ЗАДАНИЕ 6. Тесты */
	/* Условия:
			Написать программу согласно заданию. Все массивы в заданиях объявить как динамические:
			Ввести целое число N и массив из N вещественных чисел. Определить количество отрицательных
			элементов массива.
	*/

	cout << "# Задание 6. Тесты\n";

	cout << "  Тест 1. ";
	cout << Task6_CountOfNegatives() << "\n\n";

	cout << "  Тест 2. ";
	cout << Task6_CountOfNegatives() << "\n\n";

	cout << "  Тест 3. ";
	cout << Task6_CountOfNegatives() << "\n\n";


}